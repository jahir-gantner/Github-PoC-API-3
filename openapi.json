{
  "openapi": "3.0.1",
  "info": {
    "title": "GAT Relaxx API",
    "version": "v8.2.0.0"
  },
  "paths": {
    "/api/accessauthorization": {
      "get": {
        "tags": [
          "AccessAuthorization"
        ],
        "summary": "Gets the access authorizations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessAuthorizationDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessAuthorizationDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessAuthorizationDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AccessAuthorization"
        ],
        "summary": "Saves the given access authorization",
        "parameters": [
          {
            "name": "LockerGroupRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "GatAccessRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "GatGT7AccessRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AccessAlways",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AccessFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "AccessUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/apiaccesstoken": {
      "post": {
        "tags": [
          "ApiAccessToken"
        ],
        "summary": "Create api access token",
        "requestBody": {
          "description": "apiAccessToken",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateApiAccessTokenDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateApiAccessTokenDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateApiAccessTokenDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "ApiAccessToken"
        ],
        "summary": "Revoke the access token",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "ApiAccessToken"
        ],
        "summary": "Get all api access token",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization": {
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Request to delete all authorization tags.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the authorizations.  If SearchString is set all other filters will be ignored. SearchString does filter\r\nby the fields firstname, lastname, carduid, membernumber, cardnumber. Each word (separated by blanks) is\r\nsearched with wildcard at begining and end. For example \"le\" will match: \"Ble\", \"leo\", \"Alex\". The search is\r\ncase-insensitive. Card UID, member number and email only match exactly.",
        "parameters": [
          {
            "name": "AuthorizationGroupId",
            "in": "query",
            "description": "Gets or sets the authorization group id.\r\nFilter authorizations that belongs to the given authorization group id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationTagId",
            "in": "query",
            "description": "Gets or sets the authorization tag record id. Set it (not Guid.Empty) to filter by authorization primary key.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "description": "Gets or sets the card uid. Set it to filter by card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Comments",
            "in": "query",
            "description": "gets or sets the comments filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "Gets or sets the current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "gets or sets the email filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ImportId",
            "in": "query",
            "description": "Gets or sets the import identifier to filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info1",
            "in": "query",
            "description": "gets or sets the info 1 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info2",
            "in": "query",
            "description": "gets or sets the info 2 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info3",
            "in": "query",
            "description": "gets or sets the info 3 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info4",
            "in": "query",
            "description": "gets or sets the info 4 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "description": "Gets or sets the locker area Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "Gets or sets the locker group Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "description": "Gets or sets the locker number to filter.\r\nThe filter apply to assigned lockers but not to lockers in use. \r\nTo search lockers in use please check locker commands.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "description": "Gets or sets the locker id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationSearchString",
            "in": "query",
            "description": "Gets or sets the AuthorizationSearchString to filter.\r\nCan filter by firstname, lastname, cardUID, membernumber and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "description": "Gets or sets the MemberNumber. Set it to filter by member number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MustTagBeEnabled",
            "in": "query",
            "description": "Gets or sets if the tags returned must be enabled/disabled. Do not sent this property if no filter should be applied (or 'null')",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets a name to filter.\r\nApplies like operation on first name and last name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAsc",
            "in": "query",
            "description": "Gets or sets if sort ascending or descending\r\nIf null sort will be ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Gets or sets the sort property\r\nIf empty sort will be Lastname then Firstname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchId",
            "in": "query",
            "description": "gets or sets the search id. It's used for mapping in 3rd party applications and has no influence on the Relaxx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "Gets or sets the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ValidFrom",
            "in": "query",
            "description": "Gets or sets the valid from search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ValidUntil",
            "in": "query",
            "description": "Gets or sets the valid until search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "description": "Language of webUI/API user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInUseLockers",
            "in": "query",
            "description": "True if you need inuse lockers else false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationTagDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationTagDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationTagDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save an authorization. cardUID is necessary",
        "requestBody": {
          "description": "The tag dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/{recordId}": {
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to delete authorizations from the database.",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "The record identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Returns the authorization  tag for specific record id",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "The authorization tag's record id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorization/{recordId}-{isActivate}": {
      "put": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to actiavte or deactivate authorizations from the database.",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "description": "The record identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isActivate",
            "in": "path",
            "description": "tag for activate or deactivate.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/getall": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the authorizations.  If SearchString is set all other filters will be ignored. SearchString does filter\r\nby the fields firstname, lastname, carduid, membernumber, cardnumber. Each word (separated by blanks) is\r\nsearched with wildcard at begining and end. For example \"le\" will match: \"Ble\", \"leo\", \"Alex\". The search is\r\ncase-insensitive. Card UID, member number and email only match exactly. Supports paging.",
        "parameters": [
          {
            "name": "AuthorizationGroupId",
            "in": "query",
            "description": "Gets or sets the authorization group id.\r\nFilter authorizations that belongs to the given authorization group id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationTagId",
            "in": "query",
            "description": "Gets or sets the authorization tag record id. Set it (not Guid.Empty) to filter by authorization primary key.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "description": "Gets or sets the card uid. Set it to filter by card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Comments",
            "in": "query",
            "description": "gets or sets the comments filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "Gets or sets the current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "gets or sets the email filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ImportId",
            "in": "query",
            "description": "Gets or sets the import identifier to filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info1",
            "in": "query",
            "description": "gets or sets the info 1 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info2",
            "in": "query",
            "description": "gets or sets the info 2 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info3",
            "in": "query",
            "description": "gets or sets the info 3 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info4",
            "in": "query",
            "description": "gets or sets the info 4 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "description": "Gets or sets the locker area Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "Gets or sets the locker group Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "description": "Gets or sets the locker number to filter.\r\nThe filter apply to assigned lockers but not to lockers in use. \r\nTo search lockers in use please check locker commands.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "description": "Gets or sets the locker id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationSearchString",
            "in": "query",
            "description": "Gets or sets the AuthorizationSearchString to filter.\r\nCan filter by firstname, lastname, cardUID, membernumber and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "description": "Gets or sets the MemberNumber. Set it to filter by member number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MustTagBeEnabled",
            "in": "query",
            "description": "Gets or sets if the tags returned must be enabled/disabled. Do not sent this property if no filter should be applied (or 'null')",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets a name to filter.\r\nApplies like operation on first name and last name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAsc",
            "in": "query",
            "description": "Gets or sets if sort ascending or descending\r\nIf null sort will be ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Gets or sets the sort property\r\nIf empty sort will be Lastname then Firstname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchId",
            "in": "query",
            "description": "gets or sets the search id. It's used for mapping in 3rd party applications and has no influence on the Relaxx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "Gets or sets the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ValidFrom",
            "in": "query",
            "description": "Gets or sets the valid from search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ValidUntil",
            "in": "query",
            "description": "Gets or sets the valid until search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "description": "Language of webUI/API user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInUseLockers",
            "in": "query",
            "description": "True if you need inuse lockers else false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagsViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorization/authorizationtag_credentials": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to get authorizationtag credentials",
        "parameters": [
          {
            "name": "authorizationTagRecordId",
            "in": "query",
            "description": "the authorization tag",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagCredentialsViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagCredentialsViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagCredentialsViewModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save authorizationtag credentials",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAuthorizationTagCredentialViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAuthorizationTagCredentialViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAuthorizationTagCredentialViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/base64_authorizations": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the authorizations as base64 to generate a report",
        "parameters": [
          {
            "name": "AuthorizationGroupId",
            "in": "query",
            "description": "Gets or sets the authorization group id.\r\nFilter authorizations that belongs to the given authorization group id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationTagId",
            "in": "query",
            "description": "Gets or sets the authorization tag record id. Set it (not Guid.Empty) to filter by authorization primary key.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "description": "Gets or sets the card uid. Set it to filter by card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Comments",
            "in": "query",
            "description": "gets or sets the comments filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "Gets or sets the current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "gets or sets the email filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ImportId",
            "in": "query",
            "description": "Gets or sets the import identifier to filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info1",
            "in": "query",
            "description": "gets or sets the info 1 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info2",
            "in": "query",
            "description": "gets or sets the info 2 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info3",
            "in": "query",
            "description": "gets or sets the info 3 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info4",
            "in": "query",
            "description": "gets or sets the info 4 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "description": "Gets or sets the locker area Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "Gets or sets the locker group Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "description": "Gets or sets the locker number to filter.\r\nThe filter apply to assigned lockers but not to lockers in use. \r\nTo search lockers in use please check locker commands.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "description": "Gets or sets the locker id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationSearchString",
            "in": "query",
            "description": "Gets or sets the AuthorizationSearchString to filter.\r\nCan filter by firstname, lastname, cardUID, membernumber and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "description": "Gets or sets the MemberNumber. Set it to filter by member number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MustTagBeEnabled",
            "in": "query",
            "description": "Gets or sets if the tags returned must be enabled/disabled. Do not sent this property if no filter should be applied (or 'null')",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets a name to filter.\r\nApplies like operation on first name and last name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAsc",
            "in": "query",
            "description": "Gets or sets if sort ascending or descending\r\nIf null sort will be ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Gets or sets the sort property\r\nIf empty sort will be Lastname then Firstname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchId",
            "in": "query",
            "description": "gets or sets the search id. It's used for mapping in 3rd party applications and has no influence on the Relaxx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "Gets or sets the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ValidFrom",
            "in": "query",
            "description": "Gets or sets the valid from search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ValidUntil",
            "in": "query",
            "description": "Gets or sets the valid until search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "description": "Language of webUI/API user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInUseLockers",
            "in": "query",
            "description": "True if you need inuse lockers else false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorization/mastercardsets": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to get mastercard sets for .net locks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterCardSetDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterCardSetDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MasterCardSetDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save a mastercard set for .net locks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterCardSetDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterCardSetDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MasterCardSetDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/batchInsert": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save an authorization.",
        "requestBody": {
          "description": "The tag dto list.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagBatchInsertViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagBatchInsertViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagBatchInsertViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/mastercardset": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save a mastercard set for .net locks",
        "requestBody": {
          "description": "The mastercard set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterCardSetDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MasterCardSetDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MasterCardSetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/username": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save an username.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUsernameViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUsernameViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveUsernameViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to get an username",
        "parameters": [
          {
            "name": "authorizationTagRecordId",
            "in": "query",
            "description": "The authorization tag record identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UsernameDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsernameDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsernameDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorization/send_activationcode": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Send the activation code via Email to the user",
        "parameters": [
          {
            "name": "authorizationTagCredentialId",
            "in": "query",
            "description": "RecordId of the Authorizationtag credential",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/authorizationtagmfa_enabled": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to get authorizationtag mfa enabled or not",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/authorization/authorizationtag_mfa": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save authorizationtag mfa",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAuthorizationTagMfaViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAuthorizationTagMfaViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveAuthorizationTagMfaViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorization/authorizationtag_mfa/{authorizationTagRecordId}": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to get authorizationtag mfa",
        "parameters": [
          {
            "name": "authorizationTagRecordId",
            "in": "path",
            "description": "the authorization tag",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagMfaViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagMfaViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationTagMfaViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integration/authorization": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save an authorization. cardUID is necessary",
        "requestBody": {
          "description": "The tag dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutorizationInputDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutorizationInputDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutorizationInputDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the authorizations.  If SearchString is set all other filters will be ignored. SearchString does filter\r\nby the fields firstname, lastname, carduid, membernumber, cardnumber. Each word (separated by blanks) is\r\nsearched with wildcard at begining and end. For example \"le\" will match: \"Ble\", \"leo\", \"Alex\". The search is\r\ncase-insensitive. Card UID, member number and email only match exactly. Supports paging.",
        "parameters": [
          {
            "name": "AuthorizationGroupId",
            "in": "query",
            "description": "Gets or sets the authorization group id.\r\nFilter authorizations that belongs to the given authorization group id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationTagId",
            "in": "query",
            "description": "Gets or sets the authorization tag record id. Set it (not Guid.Empty) to filter by authorization primary key.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "description": "Gets or sets the card uid. Set it to filter by card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Comments",
            "in": "query",
            "description": "gets or sets the comments filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "Gets or sets the current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "gets or sets the email filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ImportId",
            "in": "query",
            "description": "Gets or sets the import identifier to filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info1",
            "in": "query",
            "description": "gets or sets the info 1 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info2",
            "in": "query",
            "description": "gets or sets the info 2 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info3",
            "in": "query",
            "description": "gets or sets the info 3 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Info4",
            "in": "query",
            "description": "gets or sets the info 4 filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "description": "Gets or sets the locker area Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "Gets or sets the locker group Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "description": "Gets or sets the locker number to filter.\r\nThe filter apply to assigned lockers but not to lockers in use. \r\nTo search lockers in use please check locker commands.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "description": "Gets or sets the locker id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "AuthorizationSearchString",
            "in": "query",
            "description": "Gets or sets the AuthorizationSearchString to filter.\r\nCan filter by firstname, lastname, cardUID, membernumber and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "description": "Gets or sets the MemberNumber. Set it to filter by member number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MustTagBeEnabled",
            "in": "query",
            "description": "Gets or sets if the tags returned must be enabled/disabled. Do not sent this property if no filter should be applied (or 'null')",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets a name to filter.\r\nApplies like operation on first name and last name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAsc",
            "in": "query",
            "description": "Gets or sets if sort ascending or descending\r\nIf null sort will be ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Gets or sets the sort property\r\nIf empty sort will be Lastname then Firstname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchId",
            "in": "query",
            "description": "gets or sets the search id. It's used for mapping in 3rd party applications and has no influence on the Relaxx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "Gets or sets the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ValidFrom",
            "in": "query",
            "description": "Gets or sets the valid from search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ValidUntil",
            "in": "query",
            "description": "Gets or sets the valid until search criteria.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "description": "Language of webUI/API user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInUseLockers",
            "in": "query",
            "description": "True if you need inuse lockers else false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integration/authorization/batch": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to save an authorization list. cardUID is necessary",
        "requestBody": {
          "description": "The tag dto.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutorizationInputDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutorizationInputDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutorizationInputDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "Authorization"
        ],
        "summary": "Update authorization in batch",
        "requestBody": {
          "description": "Batch data",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchPatchRequestDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchPatchRequestDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BatchPatchRequestDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/authorization/{id}": {
      "patch": {
        "tags": [
          "Authorization"
        ],
        "summary": "Update authorization field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Authorization record id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Patch data",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchRequestDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchRequestDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchRequestDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the authorizations.  If SearchString is set all other filters will be ignored. SearchString does filter\r\nby the fields firstname, lastname, carduid, membernumber, cardnumber. Each word (separated by blanks) is\r\nsearched with wildcard at begining and end. For example \"le\" will match: \"Ble\", \"leo\", \"Alex\". The search is\r\ncase-insensitive. Card UID, member number and email only match exactly. Supports paging.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AutorizationResponseDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutorizationResponseDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutorizationResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integration/authorization/{id}/lockers": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to assign lockers to authorization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignLockerDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignLockerDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignLockerDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Command to un-assign lockers from authorization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "lockerIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorizationgroup": {
      "get": {
        "tags": [
          "AuthorizationGroup"
        ],
        "summary": "Gets the authorization groups.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AuthorizationGroup"
        ],
        "summary": "Saves the given authorization group.",
        "requestBody": {
          "description": "The group.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationGroupDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationGroupDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationGroupDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/authorizationgroup/{name}": {
      "get": {
        "tags": [
          "AuthorizationGroup"
        ],
        "summary": "Gets an authorization group by his name.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationGroupDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationGroupDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationGroupDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integration/authorizationgroup": {
      "get": {
        "tags": [
          "AuthorizationGroup"
        ],
        "summary": "Gets the authorization groups.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupListDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupListDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthorizationGroupListDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/authorization": {
      "post": {
        "tags": [
          "AuthorizationV2"
        ],
        "summary": "Command to save an authorization. cardUID is necessary",
        "requestBody": {
          "description": "The tag dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizationTagDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/users": {
      "get": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Get all users from GAT Relaxx",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/save": {
      "post": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Save automations to database",
        "requestBody": {
          "description": "the automationTaskDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTaskDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTaskDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTaskDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/get/{currentPage}-{pageSize}": {
      "get": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Get all saved automation task from database",
        "parameters": [
          {
            "name": "currentPage",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/get": {
      "get": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Get by id",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/change_status/{isEnabled}": {
      "put": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Enable or Disable automation task",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isEnabled",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/delete": {
      "delete": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Delete automation task",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/getlogs/{currentPage}-{pageSize}": {
      "get": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Get all automation logs",
        "parameters": [
          {
            "name": "currentPage",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/automationtask/base64_exportedfile": {
      "get": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Get base64 string for exported file",
        "parameters": [
          {
            "name": "automationTaskLogId",
            "in": "query",
            "description": "automationTaskLogId",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/automationtask/desktoptasks": {
      "get": {
        "tags": [
          "AutomationTask"
        ],
        "summary": "Get list of desktop task",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/BLELockStatus": {
      "post": {
        "tags": [
          "BLELockStatus"
        ],
        "summary": "post BLE advertisments to Relaxx",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MinewAdvertisement"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MinewAdvertisement"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MinewAdvertisement"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/data-carrier-types": {
      "get": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Get all data carrier type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Create data carrier type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeCreateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeCreateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Update data carrier type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeModifyDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeModifyDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeModifyDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/data-carrier-types/{recordId}": {
      "get": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Get data carrier type by id",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Delete data carrier type by id",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/data-carrier-types/{dataCarrierTypeId}/{isActive}": {
      "put": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Make data carrier type active/inactive",
        "parameters": [
          {
            "name": "dataCarrierTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isActive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/data-carrier-types": {
      "get": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Get all data carrier type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Save data carrier type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeCreateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeCreateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Update data carrier type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeModifyDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeModifyDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DataCarrierTypeModifyDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/data-carrier-types/{recordId}": {
      "get": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Get data carrier type by id",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCarrierTypeListDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Delete data carrier type by id",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/data-carrier-types/{dataCarrierTypeId}/{isActive}": {
      "put": {
        "tags": [
          "DataCarrierTypes"
        ],
        "summary": "Update data carrier type",
        "parameters": [
          {
            "name": "dataCarrierTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isActive",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/email": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Loads the email notifications.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailNotificationDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailNotificationDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailNotificationDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/available_personal_lockers": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Gets the available personal lockers.",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "description": "The amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lockersToExclude",
            "in": "query",
            "description": "The lockers to exclude.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "lockerNumber",
            "in": "query",
            "description": "The locker number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lockerGroupID",
            "in": "query",
            "description": "The locker group identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The role identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "randomOrder",
            "in": "query",
            "description": "Get random order or next available",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/{lockerId}/close": {
      "post": {
        "tags": [
          "Locker"
        ],
        "summary": "Send a \"close\" command to the locker with the current authenticated user. The user can than close the locker in a (hardware) defined intervall. Default is 10 seconds. This method will not work with API users!",
        "parameters": [
          {
            "name": "lockerId",
            "in": "path",
            "description": "the id of the locker to open. The id is provided in the M:GAT.Relaxx.RESTAPI.Controllers.LockerController.Get(GAT.Relaxx.DTOs.Lockers.LockerFilterDTO).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker/{lockerId}/ExecuteLockerAction": {
      "post": {
        "tags": [
          "Locker"
        ],
        "summary": "Execute a locker action (\"Open\"/\"Close\") to a specified locker. This method can only be executed with api users!",
        "parameters": [
          {
            "name": "lockerId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ActionReason",
            "in": "query",
            "description": "Gets or sets the reason for this action",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AuthorizationTagRecordId",
            "in": "query",
            "description": "Gets or sets the record id of the authorization tag that should be associated with the action. If a empty record id is given (all 0 or missing) no restriction checks will be made. The action will fail if an invalid record id is given.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAction",
            "in": "query",
            "description": "the action to perfrom",
            "schema": {
              "$ref": "#/components/schemas/LockerActions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get a list of lockers. A filter can be applied.",
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/getcount": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get a locker count by area and group for web extension.",
        "parameters": [
          {
            "name": "LockerGroupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerAreaIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerCountDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerCountDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerCountDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/floorplan": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get a lockers by id or group for floor plan.",
        "parameters": [
          {
            "name": "LockerId",
            "in": "query",
            "description": "the locker id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "the locker group id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerFloorPlanDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerFloorPlanDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerFloorPlanDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/maintenance": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Gets the lockers in maintenance in specified point-in-time.",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "The date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/getall": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get a list of lockers. A filter can be applied.\r\nSupports paging.",
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockersViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/lockerreport": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get a list of lockers. A filter can be applied.\r\nSupports paging.",
        "parameters": [
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockersReportViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersReportViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersReportViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/inuselockerreport": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get inuse free locker and assigned personal/dynamic lockers",
        "parameters": [
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "LockerAreaIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerGroupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InUseLockersViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InUseLockersViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InUseLockersViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/base64_inuselockerreport": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get base64 inuse free locker and assigned personal/dynamic lockers",
        "parameters": [
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "LockerAreaIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerGroupIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/base64_lockers": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Gets the lockers as base64 to generate a report",
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/base64_lockersreport": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Gets the lockers as base64 to generate a report",
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/dashboard_counts/{roleId}": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Gets quantities of lockers for dashboard",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lockerMode",
            "in": "query",
            "description": "Lockermode to filter or null for all",
            "schema": {
              "$ref": "#/components/schemas/LockerMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardCountsDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardCountsDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardCountsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/locker_usages": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Returns report data of locker usages",
        "parameters": [
          {
            "name": "Cumulative",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/LockerActions"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "TimeResolutionInMinutes",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerUsageChartDataPointDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerUsageChartDataPointDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerUsageChartDataPointDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/plannedusage_base64_lockers": {
      "get": {
        "tags": [
          "Locker"
        ],
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/get_planned_usage_expired_lockers": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Get a list of lockers. A filter can be applied.\r\nSupports paging.",
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockersViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockersViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/lockers_in_use": {
      "get": {
        "tags": [
          "Locker"
        ],
        "summary": "Gets the lockers in use.",
        "parameters": [
          {
            "name": "cardUID",
            "in": "query",
            "description": "The card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lockerMode",
            "in": "query",
            "description": "Lockermode to filter or null for all",
            "schema": {
              "$ref": "#/components/schemas/LockerMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker/{lockerId}/open": {
      "post": {
        "tags": [
          "Locker"
        ],
        "summary": "Send a open command to a closed locker with the current authenticated user. This method will not work with API users!",
        "parameters": [
          {
            "name": "lockerId",
            "in": "path",
            "description": "the id of the locker to open. The id is provided in the M:GAT.Relaxx.RESTAPI.Controllers.LockerController.Get(GAT.Relaxx.DTOs.Lockers.LockerFilterDTO).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker/change_mode": {
      "put": {
        "tags": [
          "Locker"
        ],
        "summary": "Change locker mode",
        "requestBody": {
          "description": "ChangeLockerModeDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLockerModeDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLockerModeDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLockerModeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker/change_lockername": {
      "put": {
        "tags": [
          "Locker"
        ],
        "summary": "Change locker name/number by locker id",
        "requestBody": {
          "description": "Contain locker id and name",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLockerNameDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLockerNameDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeLockerNameDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker_area": {
      "get": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Get the root area and all sub-areas including locker groups",
        "parameters": [
          {
            "name": "IncludeFreeLockerAmount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeDynamicLockerAmount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockerAreaViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerAreaViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerAreaViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker_area/lockerarea_is_visible": {
      "get": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Get if a specified lockerarea is visible to a specified role",
        "parameters": [
          {
            "name": "lockerAreaId",
            "in": "query",
            "description": "The id of the locker area to get the visible state",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The id of the role to get the visible state",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Set if a specified lockerarea is visible to a specified role",
        "parameters": [
          {
            "name": "lockerAreaId",
            "in": "query",
            "description": "The id of the locker area to set the visible state",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The id of the role to set the visible state",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isVisible",
            "in": "query",
            "description": "[true] if visible",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker_area/lockergroup_is_visible": {
      "get": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Get if a specified lockergroup is visible to a specified role",
        "parameters": [
          {
            "name": "lockerGroupId",
            "in": "query",
            "description": "The id of the locker group to get the visible state",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The id of the role to get the visible state",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Set if a specified lockergroup is visible to a specified role",
        "parameters": [
          {
            "name": "lockerGroupId",
            "in": "query",
            "description": "The id of the locker group to set the visible state",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "The id of the role to set the visible state",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isVisible",
            "in": "query",
            "description": "[true] if visible",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker_area/organizationtree_is_visible": {
      "get": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Returns which locker groups or areas are visible for a specific role\r\nOnly returns a value if it was alreay set for the user",
        "parameters": [
          {
            "name": "roleId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/VisibleOrganizationTreeDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisibleOrganizationTreeDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisibleOrganizationTreeDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LockerArea"
        ],
        "summary": "Sets which locker groups or areas are visible for a specific role",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VisibleOrganizationTreeDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VisibleOrganizationTreeDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VisibleOrganizationTreeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker_authorization/delete_own_locker_authorization": {
      "delete": {
        "tags": [
          "LockerAuthorization"
        ],
        "summary": "Deletes the locker authorization for the current user",
        "parameters": [
          {
            "name": "lockerId",
            "in": "query",
            "description": "Locker id of the lockerauthorization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/locker_authorization": {
      "get": {
        "tags": [
          "LockerAuthorization"
        ],
        "summary": "Get a list of lockers authorizations for the current user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerAuthorizationViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerAuthorizationViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerAuthorizationViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker_authorization/get_all": {
      "get": {
        "tags": [
          "LockerAuthorization"
        ],
        "summary": "Gets a list of locker authorizations.",
        "parameters": [
          {
            "name": "LockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HardwareLockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "HardwareLockerNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "LockerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroup",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AuthorizationTagRecordID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerAuthorizationViewModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerAuthorizationViewModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerAuthorizationViewModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locker_authorization/base64_locker_authorizations": {
      "get": {
        "tags": [
          "LockerAuthorization"
        ],
        "summary": "Gets the locker authorizations as base64 to generate a report",
        "parameters": [
          {
            "name": "LockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HardwareLockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "HardwareLockerNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "LockerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroup",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AuthorizationTagRecordID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/locker_authorization/get_all_2": {
      "get": {
        "tags": [
          "LockerAuthorization"
        ],
        "summary": "Gets a list of locker authorizations. Includes the total number of available elements",
        "parameters": [
          {
            "name": "LockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "HardwareLockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "HardwareLockerNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "LockerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroup",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AuthorizationTagRecordID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockerAuthorizationViewModelPaged"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerAuthorizationViewModelPaged"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerAuthorizationViewModelPaged"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integration/lockers": {
      "get": {
        "tags": [
          "Lockers"
        ],
        "summary": "Get a list of lockers. A filter can be applied.\r\nSupports paging.",
        "parameters": [
          {
            "name": "AllowedWithAuthorizationTag",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "BleLockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "BlockedByMasterCardFilter",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "IncludeAuthorizationTags",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagInUse",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAuthorizationTagCount",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsSortDescending",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "LastClosedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastOpenedTimeLongerThan",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LastActionTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerAreaIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerControllerRecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerIdList",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "LockerModes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerMode"
              }
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerSecondaryStatesExclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerSecondaryStatesInclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerSecondaryStates"
              }
            }
          },
          {
            "name": "LockerStates",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerStates"
              }
            }
          },
          {
            "name": "LockerTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LockerTypes"
              }
            }
          },
          {
            "name": "Name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypeIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "OnlyAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAssignedLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OnlyNotAvailableLockers",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RoleId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/lockers/{id}": {
      "get": {
        "tags": [
          "Lockers"
        ],
        "summary": "Get a list of lockers. A filter can be applied.\r\nSupports paging.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/lockers/{id}/authorizations": {
      "post": {
        "tags": [
          "Lockers"
        ],
        "summary": "Command to assign aothorizations to locker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The assignAuthorization.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignAuthorizationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignAuthorizationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignAuthorizationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Lockers"
        ],
        "summary": "Command to un-assign authorizations from locker",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "authorizationIds",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser": {
      "post": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to save(add/update) a locker user.",
        "requestBody": {
          "description": "The locker user dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveLockerUserDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveLockerUserDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveLockerUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Gets the locker users.  If SearchString is set all other filters will be ignored. SearchString does filter\r\nby the fields firstname, lastname, carduid, membernumber, cardnumber. Each word (separated by blanks) is\r\nsearched with wildcard at begining and end. For example \"le\" will match: \"Ble\", \"leo\", \"Alex\". The search is\r\ncase-insensitive. Card UID, member number and email only match exactly. Supports paging.",
        "parameters": [
          {
            "name": "LockerUserGroupId",
            "in": "query",
            "description": "Gets or sets the lockeruser group id.\r\nFilter lockerusers that belongs to the given lockeruser group id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "description": "Gets or sets the card uid. Set it to filter by card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "Gets or sets the current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "gets or sets the email filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "description": "Gets or sets the locker area Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "Gets or sets the locker group Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "description": "Gets or sets the locker number to filter.\r\nThe filter apply to assigned lockers but not to lockers in use. \r\nTo search lockers in use please check locker commands.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "description": "Gets or sets the locker id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerUserSearchString",
            "in": "query",
            "description": "Gets or sets the lockeruserSearchString to filter.\r\nCan filter by firstname, lastname, cardUID, membernumber and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "description": "Gets or sets the MemberNumber. Set it to filter by member number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MustTagBeEnabled",
            "in": "query",
            "description": "Gets or sets if the tags returned must be enabled/disabled. Do not sent this property if no filter should be applied (or 'null')",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets a name to filter.\r\nApplies like operation on first name and last name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Department",
            "in": "query",
            "description": "Gets or sets a department to filter.\r\nApplies like operation on department.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAsc",
            "in": "query",
            "description": "Gets or sets if sort ascending or descending\r\nIf null sort will be ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Gets or sets the sort property\r\nIf empty sort will be Lastname then Firstname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "Gets or sets the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "description": "Language of webUI/API user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInUseLockers",
            "in": "query",
            "description": "True if you need inuse lockers else false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockerUserDTOLockerUsersViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerUserDTOLockerUsersViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerUserDTOLockerUsersViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}/lockerusergroup": {
      "put": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to save a locker user group.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The locker user group dto.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockerUserGroupDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LockerUserGroupDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LockerUserGroupDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}/disable/{isDisable}": {
      "put": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to enable/disable a locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isDisable",
            "in": "path",
            "description": "true if disbale else faldse.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}/datacarrier": {
      "post": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to save (add/update) datacarrier to locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The lockerUserDataCarrierDTO.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockerUserDataCarrierDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LockerUserDataCarrierDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LockerUserDataCarrierDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}/lockers": {
      "post": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to save (add/update) locker to locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The lockerUserAuthorizations.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveLockerUserAuthorizationDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveLockerUserAuthorizationDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SaveLockerUserAuthorizationDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}/datacarrier/{dataCarrierId}": {
      "delete": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to delete datacarrier from locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dataCarrierId",
            "in": "path",
            "description": "The dataCarrierId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}/locker/{lockerUserAuthorizationId}": {
      "delete": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to delete locker from locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "lockerUserAuthorizationId",
            "in": "path",
            "description": "The lockerUserAuthorizationId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/{lockerUserId}": {
      "delete": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to delete a locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to get a locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The locker user id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/migrate-all-authorization-to-lockerUser/{uniqueMigrationField}": {
      "post": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to migrate all authorization to locker user.\r\nIt will merge authrization based on uniqueMigrationField",
        "parameters": [
          {
            "name": "uniqueMigrationField",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UniqueMigrationField"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/pending-migration-count": {
      "get": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Get count of authrizations pending for migration",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/pending-migration-list": {
      "get": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Get list of authrizations pending for migration",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/lockeruser/merge": {
      "post": {
        "tags": [
          "LockerUser"
        ],
        "summary": "Command to migrate all authorization to locker user.\r\nIt will merge authrization based on uniqueMigrationField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeLockerUserDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeLockerUserDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MergeLockerUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users": {
      "post": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to add a locker user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLockerUserDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLockerUserDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddLockerUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Gets the locker users.  If SearchString is set all other filters will be ignored. SearchString does filter\r\nby the fields firstname, lastname, carduid, membernumber, cardnumber. Each word (separated by blanks) is\r\nsearched with wildcard at begining and end. For example \"le\" will match: \"Ble\", \"leo\", \"Alex\". The search is\r\ncase-insensitive. Card UID, member number and email only match exactly. Supports paging.",
        "parameters": [
          {
            "name": "LockerUserGroupId",
            "in": "query",
            "description": "Gets or sets the lockeruser group id.\r\nFilter lockerusers that belongs to the given lockeruser group id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "CardUID",
            "in": "query",
            "description": "Gets or sets the card uid. Set it to filter by card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CurrentPage",
            "in": "query",
            "description": "Gets or sets the current page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Email",
            "in": "query",
            "description": "gets or sets the email filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerAreaId",
            "in": "query",
            "description": "Gets or sets the locker area Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupId",
            "in": "query",
            "description": "Gets or sets the locker group Id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerNumber",
            "in": "query",
            "description": "Gets or sets the locker number to filter.\r\nThe filter apply to assigned lockers but not to lockers in use. \r\nTo search lockers in use please check locker commands.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "description": "Gets or sets the locker id to filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerUserSearchString",
            "in": "query",
            "description": "Gets or sets the lockeruserSearchString to filter.\r\nCan filter by firstname, lastname, cardUID, membernumber and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MemberNumber",
            "in": "query",
            "description": "Gets or sets the MemberNumber. Set it to filter by member number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MustTagBeEnabled",
            "in": "query",
            "description": "Gets or sets if the tags returned must be enabled/disabled. Do not sent this property if no filter should be applied (or 'null')",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "Gets or sets a name to filter.\r\nApplies like operation on first name and last name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Department",
            "in": "query",
            "description": "Gets or sets a department to filter.\r\nApplies like operation on department.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortAsc",
            "in": "query",
            "description": "Gets or sets if sort ascending or descending\r\nIf null sort will be ascending",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Gets or sets the sort property\r\nIf empty sort will be Lastname then Firstname",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Gets or sets the size of the page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SearchString",
            "in": "query",
            "description": "Gets or sets the search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "description": "Language of webUI/API user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInUseLockers",
            "in": "query",
            "description": "True if you need inuse lockers else false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LockerUserListDTOLockerUsersViewModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerUserListDTOLockerUsersViewModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockerUserListDTOLockerUsersViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integration/locker-users/bulk-insert": {
      "post": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to bulk insert locker user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkSaveLockerUserDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkSaveLockerUserDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BulkSaveLockerUserDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/{lockerUserId}": {
      "put": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to update a locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLockerUserDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLockerUserDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLockerUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to get a locker user by id.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The locker user id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to delete a locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/{id}": {
      "patch": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Update locker user field",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Authorization record id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Patch data",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchRequestDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchRequestDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PatchRequestDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/{lockerUserId}/data-carriers": {
      "post": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to add datacarrier to locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The addDataCarrierDTO.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataCarrierDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataCarrierDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataCarrierDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/{lockerUserId}/data-carriers/{dataCarrierId}": {
      "put": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to update datacarrier to locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dataCarrierId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataCarrierDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataCarrierDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataCarrierDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to delete datacarrier from locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "dataCarrierId",
            "in": "path",
            "description": "The dataCarrierId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/data-carrier/bulk-insert": {
      "post": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to bulk insert locker user.",
        "requestBody": {
          "description": "The data carrier dto.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataCarrierDTO"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataCarrierDTO"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DataCarrierDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/{lockerUserId}/lockers": {
      "post": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to save (add/update) locker to locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLockerDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLockerDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddLockerDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/locker-users/{lockerUserId}/lockers/{lockerId}": {
      "delete": {
        "tags": [
          "LockerUsers"
        ],
        "summary": "Command to delete locker from locker user.",
        "parameters": [
          {
            "name": "lockerUserId",
            "in": "path",
            "description": "The lockerUserId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "lockerId",
            "in": "path",
            "description": "The lockerId.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/logentries": {
      "delete": {
        "tags": [
          "LogEntries"
        ],
        "summary": "Deletes the same log entries that would be displayed with the specified filter.",
        "parameters": [
          {
            "name": "DateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TimeFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TimeUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerGroupID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "DeviceId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerControllerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ActionTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LogEntryActions"
              }
            }
          },
          {
            "name": "Categories",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventCategory"
              }
            }
          },
          {
            "name": "Severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventSeverity"
              }
            }
          },
          {
            "name": "LockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CardNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "MemberNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "DisableTimeSearch",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsExportAll",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": true
      },
      "get": {
        "tags": [
          "LogEntries"
        ],
        "summary": "Gets the log entries based on the specified filter.",
        "parameters": [
          {
            "name": "DateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TimeFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TimeUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerGroupID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "DeviceId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerControllerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ActionTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LogEntryActions"
              }
            }
          },
          {
            "name": "Categories",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventCategory"
              }
            }
          },
          {
            "name": "Severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventSeverity"
              }
            }
          },
          {
            "name": "LockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CardNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "MemberNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "DisableTimeSearch",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsExportAll",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryFilterSearchResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryFilterSearchResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryFilterSearchResultDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LogEntries"
        ],
        "summary": "Gets the log entries based on the specified filter.",
        "requestBody": {
          "description": "The filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryFilterSearchDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryFilterSearchDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryFilterSearchDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryFilterSearchResultDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryFilterSearchResultDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryFilterSearchResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/logentries/base64_logentries": {
      "get": {
        "tags": [
          "LogEntries"
        ],
        "summary": "Generates a base64 string from the log entries based on the specified filter.",
        "parameters": [
          {
            "name": "DateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TimeFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "TimeUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "LockerGroupID",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerGroupIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "DeviceId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerControllerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "LockerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ActionTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LogEntryActions"
              }
            }
          },
          {
            "name": "Categories",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventCategory"
              }
            }
          },
          {
            "name": "Severities",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EventSeverity"
              }
            }
          },
          {
            "name": "LockerNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CardUIDs",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "CardNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "MemberNumbers",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "DisableTimeSearch",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "IsExportAll",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FirstName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "LastName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DataCarrierTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "UserLanguage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LogEntries"
        ],
        "summary": "Generates a base64 string from the log entries based on the specified filter.",
        "requestBody": {
          "description": "The filter.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryFilterSearchDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryFilterSearchDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntryFilterSearchDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/logentries/device": {
      "get": {
        "tags": [
          "LogEntries"
        ],
        "summary": "",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HardwareDeviceDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HardwareDeviceDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HardwareDeviceDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reservation/{reservationID}": {
      "delete": {
        "tags": [
          "Reservation"
        ],
        "summary": "Deletes reservation",
        "parameters": [
          {
            "name": "reservationID",
            "in": "path",
            "description": "The reservation identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/reservation": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Gets the reservations for the given filter.",
        "parameters": [
          {
            "name": "reservationNumber",
            "in": "query",
            "description": "The reservation number.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "lockerNumber",
            "in": "query",
            "description": "The locker number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "The first name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cardUID",
            "in": "query",
            "description": "The card uid.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The until.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "The locker group id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "description": "The locker area id",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservationDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reservation/lock": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Locks the give list of locker id with the given reservation id.",
        "requestBody": {
          "description": "The view model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/reservation/notreserved": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "summary": "Get not reserved lockers.",
        "parameters": [
          {
            "name": "reservationID",
            "in": "query",
            "description": "The reservation identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "From.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "The until.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "The group identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The amount.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "areaId",
            "in": "query",
            "description": "The area identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerDTO"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerDTO"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LockerDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/reservation/Save": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Saves the give reservation to the server.",
        "requestBody": {
          "description": "The reservation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/reservation/unlock": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Unlocks the give list of locker id with the given reservation id.",
        "requestBody": {
          "description": "The view model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReservationViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/health": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "To check the health of the API.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/license": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "To check the license.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/organization_info": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get organization infos to provide it at the client",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInfoDTO"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInfoDTO"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/setting": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "Save a setting",
        "parameters": [
          {
            "name": "EntryKey",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/AppConfigurationEntries"
            }
          },
          {
            "name": "EntryValue",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "UserRecId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Workstation",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsValid",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RecordId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "IsModified",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Error",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/server_time": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Gets the current datetime of Relaxx server",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          }
        }
      }
    },
    "/api/service/settings": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get settings from db",
        "parameters": [
          {
            "name": "Key",
            "in": "query",
            "description": "Use to only get specific key. if empty all keys will be returned",
            "schema": {
              "$ref": "#/components/schemas/AppConfigurationEntries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/translations": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get all translations for the given language. Returns a key - value pair of all terms used in relaxx",
        "parameters": [
          {
            "name": "Culture",
            "in": "query",
            "description": "Use to get a specific language. if empty or invalid default laguage (en) will be returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Key",
            "in": "query",
            "description": "Use to only get specific key(s) (for example: \"name\" or \"error_code_\"). if empty all keys will be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/supportzip": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get support zip file",
        "parameters": [
          {
            "name": "FromDate",
            "in": "query",
            "description": "To Date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/supportzip_list": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get list of support zip file (last 24 hour)",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/service/supportzip_download": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Doenload support zip by name",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/service/health": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "To check the health of the API.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/change_password_api_user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Request to change the password of an api user",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordForApiUserViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordForApiUserViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordForApiUserViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/update_user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Request to update the user data",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/roles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the relaxx roles",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "used to login. Returns an access and a refresh token. To obtain a new accesstoken use M:GAT.Relaxx.RESTAPI.Controllers.UserController.Refresh(GAT.Relaxx.RESTAPI.Models.RefreshTokenViewModel)",
        "requestBody": {
          "description": "the login data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/login_api": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LoginViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/refreshcaptcha_api": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Refresh the captcha image",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/refresh": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Once logged in the access token can be renewed with the refresh token. \r\nNOTE: the refresh token will change with the refreshing! The new refresh token is returned in the response.",
        "requestBody": {
          "description": "the refresh token. M:GAT.Relaxx.RESTAPI.Controllers.UserController.Login(GAT.Relaxx.RESTAPI.Models.LoginViewModel)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/reset_password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "set the password for an existing user. An activation code (provided by Relaxx) is needed.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/send_new_activation_code": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Generate a new activation code and send it to the user",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendNewActivationCodeViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SendNewActivationCodeViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SendNewActivationCodeViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/user/set_password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordViewModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordViewModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetPasswordViewModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhook": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create webhooks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveWebhookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveWebhookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SaveWebhookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "GET all webhooks",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete the webhook",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Id of webhook",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhook/test": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Test Webhooks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestWebhookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestWebhookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestWebhookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhook/{id}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get webhooks by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of webhook",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Webhook"
        ],
        "summary": "Update the webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of webhook",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update obj",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhook/EnableDisable": {
      "patch": {
        "tags": [
          "Webhook"
        ],
        "summary": "EnableDisable webhook",
        "requestBody": {
          "description": "webhook",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableDisableWebhookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableDisableWebhookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EnableDisableWebhookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/webhook": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create webhooks",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "GET all webhooks",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/integration/webhook/{id}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Get webhooks by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of webhook",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Webhook"
        ],
        "summary": "Update the webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of webhook",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Update obj",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhookDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Delete the webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of webhook",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhooklogs/export-webhooklogs": {
      "get": {
        "tags": [
          "WebhookLogs"
        ],
        "parameters": [
          {
            "name": "PageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "WebhookName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ActionTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhooklogs/distinct-action-types": {
      "get": {
        "tags": [
          "WebhookLogs"
        ],
        "summary": "Get distinct action types for filters in webhook.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/webhooklogs": {
      "get": {
        "tags": [
          "WebhookLogs"
        ],
        "summary": "Get all webhook logs",
        "parameters": [
          {
            "name": "PageIndex",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "DateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "DateUntil",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "WebhookName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ActionTypes",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "lockerGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "gatAccessRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "gatGT7AccessRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "accessAlways": {
            "type": "boolean"
          },
          "accessFrom": {
            "type": "string",
            "format": "date-time"
          },
          "accessUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ActionTypes": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "AddDataCarrierDTO": {
        "type": "object",
        "properties": {
          "dataCarrierTypeId": {
            "type": "string",
            "description": "DataCarrierTypeId of credential",
            "format": "uuid"
          },
          "friendlyName": {
            "type": "string",
            "description": "FriendlyName of credential",
            "nullable": true
          },
          "cardUID": {
            "type": "string",
            "description": "Gets or sets the unique number (UID) of the physical card represented by this\r\nAuthorizationTag. Leading Zeros are not supported (applies also to barcode).",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Gets or sets if the AuthorizationTag is disabled."
          },
          "validFrom": {
            "type": "string",
            "description": "Gets or sets the date when the AuthorizationTag starts to be\r\nvalid.",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "description": "Gets or sets the date when the AuthorizationTag stops being valid.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the AddDataCarrierDTO entity."
      },
      "AddLockerDTO": {
        "type": "object",
        "properties": {
          "lockerId": {
            "type": "string",
            "description": "Locker id",
            "format": "uuid"
          },
          "validFrom": {
            "type": "string",
            "description": "Gets or sets the valid from date",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "description": "Gets or sets the valid until date",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AddLockerUserDTO": {
        "required": [
          "firstName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the person associated to\r\nthis AuthorizationTag."
          },
          "lastName": {
            "type": "string",
            "description": "Gets or sets the surname of the person associated to\r\nthis AuthorizationTag.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email address",
            "format": "email",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "description": "Gets or sets the member number of the person associated to\r\nthis AuthorizationTag.",
            "nullable": true
          },
          "authorizationGroupId": {
            "type": "string",
            "description": "Gets or sets the LockerUserGroupId to which the locker user belongs.",
            "format": "uuid",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "description": "Gets or sets the remark",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets or sets the department",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the add locker user entity."
      },
      "AppConfigurationEntries": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          12,
          13,
          14,
          15,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          82,
          83,
          84,
          85,
          86,
          87,
          88,
          89,
          90,
          91,
          92,
          93,
          94,
          95,
          96,
          97,
          98,
          99,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131,
          132,
          133,
          134,
          135,
          136,
          137,
          138,
          139,
          140,
          141,
          142,
          143,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          210,
          211,
          212,
          215,
          216,
          217,
          218,
          219,
          220,
          221,
          222,
          223,
          224,
          225,
          226,
          227,
          228,
          229,
          230,
          231,
          232,
          233,
          234,
          235,
          236,
          238,
          239,
          240,
          241,
          242,
          243
        ],
        "type": "integer",
        "format": "int32"
      },
      "AssignAuthorizationDTO": {
        "type": "object",
        "properties": {
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssignLockerDTO": {
        "type": "object",
        "properties": {
          "lockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Locker"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Authorization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "allowMaintenanceGroupToOpen": {
            "type": "boolean"
          },
          "allowMaintenanceGroupToOpenOnlyMaintenance": {
            "type": "boolean"
          },
          "authorizationLockerDuration": {
            "type": "string",
            "format": "uuid"
          },
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTagDTO"
            },
            "nullable": true
          },
          "groupLockerAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupLockerAuthorizationDTO"
            },
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isLegacyGroup": {
            "type": "boolean"
          },
          "isLegacyStaffGroup": {
            "type": "boolean"
          },
          "isMaintenanceGroup": {
            "type": "boolean"
          },
          "isSystemGroup": {
            "type": "boolean"
          },
          "lockerAreaAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerAreaAuthorizationDTO"
            },
            "nullable": true
          },
          "lockerGroupAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerGroupAuthorizationDTO"
            },
            "nullable": true
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "neverRevertMaintenance": {
            "type": "boolean"
          },
          "revertMaintenanceByOpen": {
            "type": "boolean"
          },
          "timeplans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTimeplanDTO"
            },
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupForIntegrationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationGroupListDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationTagBatchInsertViewModel": {
        "type": "object",
        "properties": {
          "authorizationTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTagDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthorizationTagCredentialsViewModel": {
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string",
            "description": "ActivationCode for the REST API",
            "nullable": true
          },
          "activationCodeExpiration": {
            "type": "string",
            "description": "Expiration of the ActivationCode",
            "format": "date-time"
          },
          "recordId": {
            "type": "string",
            "description": "RecordId of the Credentials",
            "format": "uuid"
          },
          "username": {
            "type": "string",
            "description": "The User for the REST API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Only the necessary properties"
      },
      "AuthorizationTagDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "authorizationGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "authorizationGroupName": {
            "type": "string",
            "nullable": true
          },
          "authorizationGroupType": {
            "type": "string",
            "nullable": true
          },
          "cardIndex": {
            "type": "integer",
            "format": "int32"
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "nullable": true
          },
          "costCenterName": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "importId": {
            "type": "string",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "nullable": true
          },
          "info3": {
            "type": "string",
            "nullable": true
          },
          "info4": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "lastChange": {
            "type": "string",
            "format": "date-time"
          },
          "lastChangeCardUID": {
            "type": "string",
            "format": "date-time"
          },
          "lastControllerInUse_FK": {
            "type": "string",
            "format": "uuid"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "lockerAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerAuthorizationDTO"
            },
            "nullable": true
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "notInUseSince": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "purseCurrency": {
            "type": "integer",
            "format": "int32"
          },
          "purseCurrentValue": {
            "type": "number",
            "format": "double"
          },
          "purseMaxCredit": {
            "type": "number",
            "format": "double"
          },
          "searchId": {
            "type": "string",
            "nullable": true
          },
          "timeplans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTimeplanDTO"
            },
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "inUseLockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerDTO"
            },
            "nullable": true
          },
          "lockerUser": {
            "$ref": "#/components/schemas/LockerUserDTO"
          },
          "dataCarrierType": {
            "$ref": "#/components/schemas/DataCarrierTypeDTO"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationTagMfaViewModel": {
        "type": "object",
        "properties": {
          "recordId": {
            "type": "string",
            "description": "the recordid",
            "format": "uuid"
          },
          "isPinCodeSet": {
            "type": "boolean",
            "description": "Gets or sets if the authorizationtag allready has a pin code set"
          },
          "noPinRequired": {
            "type": "boolean",
            "description": "Gets or sets if a pin code is required for this authorizationtag"
          },
          "pinCode": {
            "type": "string",
            "description": "The pin code in cleartext \r\nOnly required for save a new pin from client",
            "nullable": true
          },
          "renewPinRequired": {
            "type": "boolean",
            "description": "True if the user has to change the pin on next usage"
          }
        },
        "additionalProperties": false,
        "description": "Only the necessary properties"
      },
      "AuthorizationTagsViewModel": {
        "type": "object",
        "properties": {
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTagDTO"
            },
            "description": "the items on the page",
            "nullable": true
          },
          "totalElements": {
            "type": "integer",
            "description": "number of ALL available elements",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "AuthorizationTimeplanDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "authorizationTag": {
            "$ref": "#/components/schemas/AuthorizationTagDTO"
          },
          "authorizationGroup": {
            "$ref": "#/components/schemas/AuthorizationGroupDTO"
          },
          "authorizationGroupRecordID": {
            "type": "string",
            "format": "uuid"
          },
          "authorizationTagRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/TimeplanDaysOfWeek"
          },
          "localisedDayOfWeek": {
            "type": "string",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AuthorizationViewModel": {
        "type": "object",
        "properties": {
          "authorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutorizationResponseDTO"
            },
            "description": "the items on the page",
            "nullable": true
          },
          "totalRecords": {
            "type": "integer",
            "description": "number of ALL available records",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "AutomationTaskAction": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "AutomationTaskActionDTO": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AutomationTaskAction"
          },
          "subAction": {
            "$ref": "#/components/schemas/AutomationTaskSubAction"
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "onSuccessOfLastAction": {
            "type": "boolean"
          },
          "lockerReportFilter": {
            "$ref": "#/components/schemas/TaskLockerFilterDTO"
          },
          "lockerAuthReportFilter": {
            "$ref": "#/components/schemas/LockerAuthorizationFilterDTO"
          }
        },
        "additionalProperties": false
      },
      "AutomationTaskConditionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "operator": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutomationTaskDTO": {
        "required": [
          "name",
          "owner"
        ],
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "owner": {
            "type": "integer",
            "format": "int32"
          },
          "ownerName": {
            "type": "string",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean"
          },
          "cronExpression": {
            "$ref": "#/components/schemas/CronExpressionDTO"
          },
          "taskTrigger": {
            "$ref": "#/components/schemas/AutomationTaskTrigger"
          },
          "action": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationTaskActionDTO"
            },
            "nullable": true
          },
          "subAction": {
            "$ref": "#/components/schemas/AutomationTaskSubAction"
          },
          "filter": {
            "type": "string",
            "nullable": true
          },
          "taskCondition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationTaskConditionDTO"
            },
            "nullable": true
          },
          "userLanguage": {
            "type": "string",
            "nullable": true
          },
          "isSendEmail": {
            "type": "boolean"
          },
          "emailTo": {
            "type": "string",
            "nullable": true
          },
          "emailCC": {
            "type": "string",
            "nullable": true
          },
          "jobId": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "nullable": true
          },
          "updatedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isUpdated": {
            "type": "boolean"
          },
          "automationTaskLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationTaskLogDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutomationTaskLogDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "automationTask": {
            "$ref": "#/components/schemas/AutomationTaskDTO"
          },
          "automationId": {
            "type": "string",
            "format": "uuid"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "isSuccess": {
            "type": "boolean"
          },
          "filePath": {
            "type": "string",
            "nullable": true
          },
          "errorLog": {
            "type": "string",
            "nullable": true
          },
          "isEmailSent": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AutomationTaskPeriod": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "AutomationTaskSubAction": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "AutomationTaskTrigger": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "AutorizationInputDTO": {
        "required": [
          "cardUID"
        ],
        "type": "object",
        "properties": {
          "cardUID": {
            "type": "integer",
            "format": "int64"
          },
          "authorizationGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "cardIndex": {
            "type": "integer",
            "format": "int32"
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "nullable": true
          },
          "costCenterName": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "nullable": true
          },
          "info3": {
            "type": "string",
            "nullable": true
          },
          "info4": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AutorizationResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "authorizationGroup": {
            "$ref": "#/components/schemas/AuthorizationGroupForIntegrationDTO"
          },
          "cardIndex": {
            "type": "integer",
            "format": "int32"
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "nullable": true
          },
          "costCenterName": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "nullable": true
          },
          "info3": {
            "type": "string",
            "nullable": true
          },
          "info4": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "lockerAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerAuthorizationDTO"
            },
            "nullable": true
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockersPerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "inUseLockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the AuthorizationTag entity for integration."
      },
      "BatchPatchRequestDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "patchRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchRequestDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BulkSaveLockerUserDTO": {
        "required": [
          "firstName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "authorizationGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeLockerModeDTO": {
        "type": "object",
        "properties": {
          "lockerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "lockerMode": {
            "$ref": "#/components/schemas/LockerMode"
          }
        },
        "additionalProperties": false
      },
      "ChangeLockerNameDTO": {
        "type": "object",
        "properties": {
          "lockerId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordForApiUserViewModel": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Gets or sets the user for which the password should be changed",
            "nullable": true
          },
          "oldPassword": {
            "type": "string",
            "description": "Gets or sets the password.",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "description": "Gets or sets the new password.",
            "nullable": true
          },
          "repeatNewPassword": {
            "type": "string",
            "description": "Gets or sets the repeat new password.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateWebhook": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lockerLocation": {
            "$ref": "#/components/schemas/WebhookLockerLocation"
          }
        },
        "additionalProperties": false
      },
      "CronExpressionDTO": {
        "type": "object",
        "properties": {
          "period": {
            "$ref": "#/components/schemas/AutomationTaskPeriod"
          },
          "datetime": {
            "type": "string",
            "format": "date-time"
          },
          "jobTime": {
            "type": "string",
            "nullable": true
          },
          "weekdays": {
            "type": "string",
            "nullable": true
          },
          "dayOfMonth": {
            "type": "integer",
            "format": "int32"
          },
          "recurEvery": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DashboardCountsDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "authorizations": {
            "type": "integer",
            "format": "int32"
          },
          "lockerUsers": {
            "type": "integer",
            "format": "int32"
          },
          "lockers": {
            "$ref": "#/components/schemas/LockerCounts"
          }
        },
        "additionalProperties": false
      },
      "DataCarrierDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "dataCarrierTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerUserId": {
            "type": "string",
            "format": "uuid"
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DataCarrierTypeCreateDTO": {
        "required": [
          "name",
          "uidFormat"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name"
          },
          "uidFormat": {
            "$ref": "#/components/schemas/UIDFormat"
          },
          "useAlphaNumericForHardware": {
            "type": "boolean",
            "description": "Gets or sets the UseAlphaNumericForHardware"
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the data carrier type entity."
      },
      "DataCarrierTypeDTO": {
        "required": [
          "name",
          "uidFormat"
        ],
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "uidFormat": {
            "$ref": "#/components/schemas/UIDFormat"
          },
          "useAlphaNumericForHardware": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DataCarrierTypeListDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name",
            "nullable": true
          },
          "uidFormat": {
            "type": "string",
            "description": "Gets or sets the UidFormat",
            "nullable": true
          },
          "useAlphaNumericForHardware": {
            "type": "boolean",
            "description": "Gets or sets the UseAlphaNumericForHardware"
          },
          "isActive": {
            "type": "boolean",
            "description": "Gets or sets the IsActive"
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the data carrier type entity."
      },
      "DataCarrierTypeModifyDTO": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the id",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name"
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the data carrier type entity."
      },
      "EnableDisableWebhookDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EventCategory": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "EventSeverity": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "GenerateApiAccessTokenDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GroupLockerAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "authorizationGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "lockerMode": {
            "$ref": "#/components/schemas/LockerMode"
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupByte": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lockerGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDisabled": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HardwareDeviceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InUseLockerReport": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "lockerGroup": {
            "type": "string",
            "nullable": true
          },
          "lockerArea": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "integer",
            "format": "int32"
          },
          "secondaryStates": {
            "type": "integer",
            "format": "int32"
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "authorizationGroup": {
            "type": "string",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastClosedTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockerMode": {
            "type": "string",
            "nullable": true
          },
          "lockerLocation": {
            "type": "string",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "nullable": true
          },
          "info3": {
            "type": "string",
            "nullable": true
          },
          "info4": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "isMaintenance": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "cardIndex": {
            "type": "string",
            "nullable": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "dataCarrierType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InUseLockersViewModel": {
        "type": "object",
        "properties": {
          "lockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InUseLockerReport"
            },
            "description": "Lockers",
            "nullable": true
          },
          "totalElements": {
            "type": "integer",
            "description": "TotalElements",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "InUseLockersViewModel"
      },
      "Locker": {
        "type": "object",
        "properties": {
          "lockerId": {
            "type": "string",
            "format": "uuid"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LockerActions": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ],
        "type": "integer",
        "format": "int32"
      },
      "LockerAreaAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "lockerAreaRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LockerAreaViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "the name of the area",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The database id",
            "format": "uuid"
          },
          "lockerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerGroupViewModel"
            },
            "description": "the locker groups assigned to this area",
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerAreaViewModel"
            },
            "description": "the child areas",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "represents a locker area"
      },
      "LockerAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "authorizationTagRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "nullable": true
          },
          "importId": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupByte": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerLastClosedTime": {
            "type": "string",
            "format": "date-time"
          },
          "lockerMode": {
            "$ref": "#/components/schemas/LockerMode"
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "lockerRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerSecondaryStates": {
            "$ref": "#/components/schemas/LockerSecondaryStates"
          },
          "lockerState": {
            "$ref": "#/components/schemas/LockerStates"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LockerAuthorizationFilterDTO": {
        "type": "object",
        "properties": {
          "cardUIDs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lockerModes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerMode"
            },
            "nullable": true
          },
          "lockerIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lockerGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "lockerAreaIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockerAuthorizationViewModel": {
        "type": "object",
        "properties": {
          "authorizationTagRecordId": {
            "type": "string",
            "description": "",
            "format": "uuid"
          },
          "cardUID": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean",
            "description": "",
            "nullable": true
          },
          "lastname": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lockerGroupByte": {
            "type": "integer",
            "description": "",
            "format": "int32",
            "nullable": true
          },
          "lockerGroupName": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lockerLastClosedTime": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "lockerNumber": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "lockerRecordId": {
            "type": "string",
            "description": "",
            "format": "uuid"
          },
          "lockerSecondaryStates": {
            "$ref": "#/components/schemas/LockerSecondaryStates"
          },
          "lockerState": {
            "$ref": "#/components/schemas/LockerStates"
          },
          "validFrom": {
            "type": "string",
            "description": "",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "description": "",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "LockerAuthorizationViewModelPaged": {
        "type": "object",
        "properties": {
          "lockerAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerAuthorizationViewModel"
            },
            "description": "the items on the page",
            "nullable": true
          },
          "totalElements": {
            "type": "integer",
            "description": "number of ALL available elements",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "LockerCountDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "totalLocker": {
            "type": "integer",
            "format": "int32"
          },
          "availableLocker": {
            "type": "integer",
            "format": "int32"
          },
          "inuseLocker": {
            "type": "integer",
            "format": "int32"
          },
          "availableLockerPer": {
            "type": "number",
            "format": "float"
          },
          "isGroup": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LockerCounts": {
        "type": "object",
        "properties": {
          "alarmed": {
            "type": "integer",
            "format": "int32"
          },
          "available": {
            "type": "integer",
            "format": "int32"
          },
          "inUse": {
            "type": "integer",
            "format": "int32"
          },
          "maintenance": {
            "type": "integer",
            "format": "int32"
          },
          "outOfService": {
            "$ref": "#/components/schemas/OutOfServiceCounts"
          }
        },
        "additionalProperties": false
      },
      "LockerDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "address": {
            "type": "integer",
            "format": "int32"
          },
          "antennaMatching": {
            "type": "integer",
            "format": "int32"
          },
          "articleNumber": {
            "type": "string",
            "nullable": true
          },
          "assignedAuthorizationCount": {
            "type": "integer",
            "format": "int32"
          },
          "assignedAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTagDTO"
            },
            "nullable": true
          },
          "assignedLockerUserCount": {
            "type": "integer",
            "format": "int32"
          },
          "assignedLockerUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerUserDTO"
            },
            "nullable": true
          },
          "authorizationTagInUse": {
            "$ref": "#/components/schemas/AuthorizationTagDTO"
          },
          "bleActionType": {
            "$ref": "#/components/schemas/ActionTypes"
          },
          "bleAlarm": {
            "type": "boolean",
            "nullable": true
          },
          "bleBatterWarning": {
            "type": "boolean",
            "nullable": true
          },
          "bleBlockedByBlockingCard": {
            "type": "boolean",
            "nullable": true
          },
          "bleClosed": {
            "type": "boolean",
            "nullable": true
          },
          "bleDeviceId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bleEncodingByteSet": {
            "type": "boolean",
            "nullable": true
          },
          "bleLocked": {
            "type": "boolean",
            "nullable": true
          },
          "bleLockerNumber": {
            "type": "string",
            "nullable": true
          },
          "bleMinutesSince2007": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "bleRtcInvalid": {
            "type": "boolean",
            "nullable": true
          },
          "bleUtcLastUpdate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "cardUIDInUse": {
            "type": "string",
            "nullable": true
          },
          "controlChannelName": {
            "type": "string",
            "nullable": true
          },
          "displayAddress": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "freeLockerReservationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "freeLockerReservationUID": {
            "type": "string",
            "nullable": true
          },
          "hardwareLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "hardwareLockerNumber": {
            "type": "integer",
            "format": "int32"
          },
          "isExisting": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isFreeLocker": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isPrelocked": {
            "type": "boolean",
            "nullable": true
          },
          "isReservableLocker": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "lastCloseBeforeSpecialCard": {
            "type": "string",
            "nullable": true
          },
          "lastClosedTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastMaintenanceState": {
            "type": "string",
            "format": "date-time"
          },
          "lastOpenedTime": {
            "type": "string",
            "format": "date-time"
          },
          "legacyRecId": {
            "type": "integer",
            "format": "int32"
          },
          "lockerCloseCount": {
            "type": "integer",
            "format": "int32"
          },
          "lockerControllerId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerControllerName": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupByteId": {
            "type": "integer",
            "format": "int32"
          },
          "lockerGroupExternalId": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerAreaIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "lockerLocation": {
            "type": "string",
            "nullable": true
          },
          "lockerHardwareVersion": {
            "type": "string",
            "nullable": true
          },
          "lockerIndex": {
            "type": "integer",
            "format": "int32"
          },
          "lockerMode": {
            "$ref": "#/components/schemas/LockerMode"
          },
          "lockerSoftwareVersion": {
            "type": "string",
            "nullable": true
          },
          "lockerType": {
            "$ref": "#/components/schemas/LockerTypes"
          },
          "maxAllowedCards": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "secondaryStates": {
            "$ref": "#/components/schemas/LockerSecondaryStates"
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/LockerStates"
          },
          "subControllerSerialNumber": {
            "type": "string",
            "nullable": true
          },
          "lockedSince": {
            "type": "string",
            "nullable": true
          },
          "plannedTime": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockerFloorPlanDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "isMaintenance": {
            "type": "boolean"
          },
          "isReserved": {
            "type": "boolean"
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockerGroupAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "authorizationGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "lockerGroupRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LockerGroupDTO": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "availableDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "availableFreeLockers": {
            "type": "integer",
            "format": "int32"
          },
          "customLockerSegment": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "drawingId": {
            "type": "string",
            "format": "uuid"
          },
          "externalId": {
            "type": "string",
            "nullable": true
          },
          "freeLockersAmount": {
            "type": "integer",
            "format": "int32"
          },
          "infoText": {
            "type": "string",
            "nullable": true
          },
          "lastMaintenanceOpening": {
            "type": "string",
            "format": "date-time"
          },
          "lockerAreaId": {
            "type": "string",
            "format": "uuid"
          },
          "maximumUsageTime": {
            "type": "string",
            "format": "date-span"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LockerGroupViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the group",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "the database id",
            "format": "uuid"
          },
          "amountOfAvailableFreeLockers": {
            "type": "integer",
            "description": "Gets or sets the amount of available free lockers. If the value was not determinated on server side the value equals -1. GAT.Relaxx.RESTAPI.Models.LockerAreaFilterViewModel",
            "format": "int32"
          },
          "amountOfAvailableDynamicLockers": {
            "type": "integer",
            "description": "Gets or sets the amount of available dynamic lockers. If the value was not determinated on server side the value equals -1. GAT.Relaxx.RESTAPI.Models.LockerAreaFilterViewModel",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "represents a locker group"
      },
      "LockerMode": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "LockerReportViewModel": {
        "type": "object",
        "properties": {
          "lockerNumber": {
            "type": "string",
            "description": "Locker number",
            "nullable": true
          },
          "lockerMode": {
            "type": "string",
            "description": "Locker mode",
            "nullable": true
          },
          "lockerGroup": {
            "type": "string",
            "description": "LockerGroup",
            "nullable": true
          },
          "dataCarrierType": {
            "type": "string",
            "description": "DataCarrierType",
            "nullable": true
          },
          "dataCarrierUID": {
            "type": "string",
            "description": "DataCarrierUID",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "description": "MemberNumber",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Locker user name",
            "nullable": true
          },
          "closedFor": {
            "type": "string",
            "description": "ClosedFor",
            "nullable": true
          },
          "openedSince": {
            "type": "string",
            "description": "OpenedSince",
            "nullable": true
          },
          "lastAction": {
            "type": "string",
            "description": "LastAction",
            "format": "date-time",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State",
            "nullable": true
          },
          "isReserved": {
            "type": "boolean",
            "description": "IsReserved"
          },
          "isMaintenance": {
            "type": "boolean",
            "description": "IsMaintenance"
          },
          "department": {
            "type": "string",
            "description": "Department",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "represents a locker"
      },
      "LockerSecondaryStates": {
        "enum": [
          0,
          2,
          4,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "LockerStates": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "format": "int32"
      },
      "LockerTypes": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "LockerUsageChartDataPointDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "counts": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LockerUserAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "lockerUserId": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean",
            "nullable": true
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerLastClosedTime": {
            "type": "string",
            "format": "date-time"
          },
          "lockerMode": {
            "$ref": "#/components/schemas/LockerMode"
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "lockerRecordId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerSecondaryStates": {
            "$ref": "#/components/schemas/LockerSecondaryStates"
          },
          "lockerState": {
            "$ref": "#/components/schemas/LockerStates"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LockerUserAuthorizationGroupDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockerUserDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "lockerUserAuthorizationGroup": {
            "$ref": "#/components/schemas/LockerUserAuthorizationGroupDTO"
          },
          "remark": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "lockerUserDataCarriers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerUserDataCarrierDTO"
            },
            "nullable": true
          },
          "lockerUserAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerUserAuthorizationDTO"
            },
            "nullable": true
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "inUseLockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockerUserDTOLockerUsersViewModel": {
        "type": "object",
        "properties": {
          "lockerUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerUserDTO"
            },
            "description": "the items on the page",
            "nullable": true
          },
          "totalRecords": {
            "type": "integer",
            "description": "number of ALL available elements",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "LockerUsersViewModel"
      },
      "LockerUserDataCarrierDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "dataCarrierTypeId": {
            "type": "string",
            "format": "uuid"
          },
          "dataCarrierTypeName": {
            "type": "string",
            "nullable": true
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LockerUserGroupDTO": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "format": "uuid"
          },
          "maxAllowedLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedLockersPerGroup": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockers": {
            "type": "integer",
            "format": "int32"
          },
          "maxAllowedDynamicLockersPerLockerGroup": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LockerUserListDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "authorizationGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LockerUserListDTOLockerUsersViewModel": {
        "type": "object",
        "properties": {
          "lockerUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerUserListDTO"
            },
            "description": "the items on the page",
            "nullable": true
          },
          "totalRecords": {
            "type": "integer",
            "description": "number of ALL available elements",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "LockerUsersViewModel"
      },
      "LockerViewModel": {
        "type": "object",
        "properties": {
          "assignationCapacity": {
            "type": "integer",
            "description": "Max assignable card (Personal locker)",
            "format": "int32"
          },
          "assignedAuthorizationCount": {
            "type": "integer",
            "description": "AssignedAuthorizationCount",
            "format": "int32"
          },
          "assignedAuthorizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationTagDTO"
            },
            "description": "Gets or sets the assigned authorizations",
            "nullable": true
          },
          "assignedLockerUserCount": {
            "type": "integer",
            "description": "AssignedLockerUserCount",
            "format": "int32"
          },
          "assignedLockerUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerUserDTO"
            },
            "description": "Gets or sets the assigned locker user",
            "nullable": true
          },
          "authorizationTagInUse": {
            "$ref": "#/components/schemas/AuthorizationTagDTO"
          },
          "bleActionType": {
            "$ref": "#/components/schemas/ActionTypes"
          },
          "bleAlarm": {
            "type": "boolean",
            "description": "ble battery lock property",
            "nullable": true
          },
          "bleBatterWarning": {
            "type": "boolean",
            "description": "ble battery lock property",
            "nullable": true
          },
          "bleBlockedByBlockingCard": {
            "type": "boolean",
            "description": "ble battery lock property",
            "nullable": true
          },
          "bleClosed": {
            "type": "boolean",
            "description": "ble battery lock property",
            "nullable": true
          },
          "bleDeviceId": {
            "type": "integer",
            "description": "ble battery lock property",
            "format": "int32",
            "nullable": true
          },
          "bleEncodingByteSet": {
            "type": "boolean",
            "description": "If the encoding byte is set, the new values are used for device identification\r\nhttps://portal.gantner.com/display/rudhardware/Device+IDs",
            "nullable": true
          },
          "bleLocked": {
            "type": "boolean",
            "description": "ble battery lock property",
            "nullable": true
          },
          "bleLockerNumber": {
            "type": "string",
            "description": "Lockernumber which the ble locker has in hardware",
            "nullable": true
          },
          "bleMinutesSince2007": {
            "type": "integer",
            "description": "ble battery lock property",
            "format": "int32",
            "nullable": true
          },
          "bleRtcInvalid": {
            "type": "boolean",
            "description": "ble battery lock property",
            "nullable": true
          },
          "bleUtcLastUpdate": {
            "type": "string",
            "description": "Gets or sets when the last ble advertisment was received [UTC]",
            "format": "date-time",
            "nullable": true
          },
          "cardUIDInUse": {
            "type": "string",
            "description": "Gets or sets the card uid in use if there is one.",
            "nullable": true
          },
          "hardwareLockerGroup": {
            "type": "integer",
            "description": "the hardwarelockergroup",
            "format": "int32"
          },
          "hardwareLockerNumber": {
            "type": "integer",
            "description": "the hardware lockernumber",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "the database id of the locker",
            "format": "uuid"
          },
          "isMaintenance": {
            "type": "boolean",
            "description": "True if the locker is in maintenance mode."
          },
          "isReserved": {
            "type": "boolean",
            "description": "True if the locker is reserved (= authorization assigned, state of the lock doesn't matter)"
          },
          "lastClosedTime": {
            "type": "string",
            "description": "Gets or sets the last closed time.",
            "format": "date-time"
          },
          "lastOpenedTime": {
            "type": "string",
            "description": "Gets or sets the last opened time.",
            "format": "date-time"
          },
          "lastClosedTimeString": {
            "type": "string",
            "description": "Gets or sets the last closed time string.",
            "nullable": true
          },
          "lastOpenedTimeString": {
            "type": "string",
            "description": "Gets or sets the last opened time string.",
            "nullable": true
          },
          "lockerCloseCount": {
            "type": "integer",
            "description": "Gets or sets the locker close counter.",
            "format": "int32"
          },
          "lockerGroupExternalId": {
            "type": "string",
            "description": "Gets or sets the external identifier. This could be any string and is used to identify the locker group in a 3rd party system",
            "nullable": true
          },
          "lockerGroupId": {
            "type": "string",
            "description": "The id of the corresponding locker group",
            "format": "uuid"
          },
          "lockerGroupName": {
            "type": "string",
            "description": "The Name nof teh corresponding locker group.",
            "nullable": true
          },
          "lockerGroupNumber": {
            "type": "integer",
            "description": "the locker group number",
            "format": "int32"
          },
          "lockerMode": {
            "type": "string",
            "description": "the locker mode: NotExisting = 1, FreeLocker = 2, PersonalLocker = 3, ReservableLocker = 4, DynamicLocker = 5,",
            "nullable": true
          },
          "lockerNumber": {
            "type": "string",
            "description": "Lockernumber",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "The state of the locker: Unknown = 0, Disabled = 1, Free = 2, InUse = 3, Blocked = 4, Alarmed = 5, InUseAndExpired = 6, NotFound = 7,",
            "nullable": true
          },
          "lockedSince": {
            "type": "string",
            "description": "Gets or sets the locked time of locker.",
            "nullable": true
          },
          "plannedTime": {
            "type": "string",
            "description": "Gets or sets the planned time of locker group.",
            "nullable": true
          },
          "lockerLocation": {
            "type": "string",
            "description": "The full location of locker including area and group.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "represents a locker"
      },
      "LockersReportViewModel": {
        "type": "object",
        "properties": {
          "lockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerReportViewModel"
            },
            "nullable": true
          },
          "totalElements": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LockersViewModel": {
        "type": "object",
        "properties": {
          "lockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerViewModel"
            },
            "nullable": true
          },
          "totalElements": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LogEntryActions": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60,
          61,
          62,
          63,
          64,
          65,
          66,
          67,
          68,
          69,
          70,
          71,
          72,
          73,
          74,
          75,
          76,
          77,
          78,
          79,
          1000,
          1001,
          1002,
          1003,
          1004,
          1005,
          1006,
          1007,
          1008,
          1009,
          1010,
          1011,
          1012,
          1013,
          1014,
          1015,
          1016,
          1017,
          1018,
          1019,
          1020,
          1021,
          1022,
          1023,
          1024,
          1025,
          1026,
          1027,
          1028,
          1029,
          1030,
          1031,
          1032,
          1034,
          1035,
          1036,
          1037,
          1038,
          1039,
          1040,
          1041,
          1042,
          1043,
          1044,
          1045,
          1046,
          1047,
          1048,
          1049,
          1050,
          1051,
          1052,
          1053,
          1054,
          1055,
          1056,
          1057,
          1058,
          1059,
          1060,
          1061,
          1062,
          1063,
          1064,
          1065,
          1066,
          1067,
          1068,
          1069,
          1070,
          1071,
          1072,
          1073,
          1074,
          1075,
          1076,
          1077,
          1078,
          1079,
          1080,
          1081,
          1082,
          1083,
          1084,
          1085,
          1086,
          1087,
          1088,
          1089,
          1090,
          1091,
          1092,
          1093,
          1094,
          1095,
          1096,
          1097,
          1098,
          1099,
          1100,
          1101,
          1102,
          1103,
          1104,
          1105,
          1106,
          1107,
          1108,
          1109,
          1200,
          1201
        ],
        "type": "integer",
        "format": "int32"
      },
      "LogEntryDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "action": {
            "$ref": "#/components/schemas/LogEntryActions"
          },
          "actionToShow": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "cardNumber": {
            "type": "string",
            "nullable": true
          },
          "dataCarrierType": {
            "type": "string",
            "nullable": true
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "controlChannelID": {
            "type": "string",
            "format": "uuid"
          },
          "controlChannelName": {
            "type": "string",
            "nullable": true
          },
          "controllerId": {
            "type": "string",
            "format": "uuid"
          },
          "controllerName": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "extraData": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "nullable": true
          },
          "info3": {
            "type": "string",
            "nullable": true
          },
          "info4": {
            "type": "string",
            "nullable": true
          },
          "isOfflineLockerManipulation": {
            "type": "boolean"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "lockerId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "optionalData": {
            "type": "string",
            "nullable": true
          },
          "optionalDataArguments": {
            "type": "string",
            "nullable": true
          },
          "optionalDataCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "optionalDataString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "remoteLocation": {
            "type": "string",
            "nullable": true
          },
          "severity": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "transactionId": {
            "type": "integer",
            "format": "int64"
          },
          "userName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogEntryFilterSearchDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "dateFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dateUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timeFrom": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "timeUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lockerGroupID": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lockerGroupIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "deviceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lockerControllerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lockerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "actionTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntryActions"
            },
            "nullable": true
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventCategory"
            },
            "nullable": true
          },
          "severities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventSeverity"
            },
            "nullable": true
          },
          "lockerNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "cardUIDs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "cardNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "memberNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "disableTimeSearch": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "isExportAll": {
            "type": "boolean"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "dataCarrierTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userLanguage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogEntryFilterSearchResultDTO": {
        "type": "object",
        "properties": {
          "logEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntryDTO"
            },
            "nullable": true
          },
          "nextPageAvailable": {
            "type": "boolean"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "LoginViewModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Gets or sets the username.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Gets or sets the password.",
            "nullable": true
          },
          "captchaCode": {
            "type": "string",
            "description": "Gets or sets the captcha code.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "MailNotificationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "filterForLockerGroups": {
            "type": "boolean"
          },
          "isSendingToLockerUser": {
            "type": "boolean"
          },
          "lockerGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockerGroupDTO"
            },
            "nullable": true
          },
          "lockerUserMailContent": {
            "type": "string",
            "nullable": true
          },
          "lockerUserSubject": {
            "type": "string",
            "nullable": true
          },
          "notificationName": {
            "type": "string",
            "nullable": true
          },
          "recipients": {
            "type": "string",
            "nullable": true
          },
          "serializedDefinition": {
            "type": "string",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MasterCardDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "cardIndex": {
            "type": "integer",
            "format": "int32"
          },
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MasterCardSetDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "masterCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MasterCardDTO"
            },
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MergeLockerUserDTO": {
        "required": [
          "primaryLockerUserId"
        ],
        "type": "object",
        "properties": {
          "primaryLockerUserId": {
            "type": "string",
            "format": "uuid"
          },
          "secondaryLockerUserIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinewAdvertisement": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "mac": {
            "type": "string",
            "nullable": true
          },
          "bleName": {
            "type": "string",
            "nullable": true
          },
          "rssi": {
            "type": "integer",
            "format": "int32"
          },
          "rawData": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationInfoDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "base64Image": {
            "type": "string",
            "nullable": true
          },
          "organizationName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutOfServiceCounts": {
        "type": "object",
        "properties": {
          "blocked": {
            "type": "integer",
            "format": "int32"
          },
          "disabled": {
            "type": "integer",
            "format": "int32"
          },
          "notFound": {
            "type": "integer",
            "format": "int32"
          },
          "unknown": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PatchRequestDTO": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Field to update",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Value to update",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request body for http patch request"
      },
      "RefreshTokenViewModel": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReservationDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "reservationNumber": {
            "type": "integer",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "info": {
            "type": "string",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          },
          "reservedLockers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationLockersDTO"
            },
            "nullable": true
          },
          "isModified": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ReservationLockersDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "lockerRecordID": {
            "type": "string",
            "format": "uuid"
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupName": {
            "type": "string",
            "nullable": true
          },
          "reservation": {
            "$ref": "#/components/schemas/ReservationDTO"
          },
          "cardUIDList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isModified": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ReservationViewModel": {
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "string",
            "format": "uuid"
          },
          "lockerId": {
            "type": "string",
            "format": "uuid"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "until": {
            "type": "string",
            "format": "date-time"
          },
          "lockUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ResetPasswordViewModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username",
            "nullable": true
          },
          "activationCode": {
            "type": "string",
            "description": "The activation code provided by relaxx",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The password to set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "RoleLockerAreaPermissionDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          },
          "lockerArea": {
            "type": "string",
            "format": "uuid"
          },
          "isVisible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RoleLockerGroupPermissionDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          },
          "lockerGroup": {
            "type": "string",
            "format": "uuid"
          },
          "isVisible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RoleMasterCardSetPermissionDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "roleId": {
            "type": "integer",
            "format": "int32"
          },
          "masterCardSet": {
            "type": "string",
            "format": "uuid"
          },
          "isVisible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SaveAuthorizationTagCredentialViewModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "the username",
            "nullable": true
          },
          "activationCode": {
            "type": "string",
            "description": "activation code",
            "nullable": true
          },
          "authorizationTagRecordId": {
            "type": "string",
            "description": "the authorization tag where the credentials belongs to",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SaveAuthorizationTagMfaViewModel": {
        "type": "object",
        "properties": {
          "recordId": {
            "type": "string",
            "description": "the recordid",
            "format": "uuid"
          },
          "renewPinRequired": {
            "type": "boolean",
            "description": "True if the user has to change the pin on next usage"
          },
          "noPinRequired": {
            "type": "boolean",
            "description": "Gets or sets if a pin code is required for this authorizationtag"
          },
          "pinCode": {
            "type": "string",
            "description": "The pin code in cleartext \r\nOnly required for save a new pin from client",
            "nullable": true
          },
          "authorizationTagRecordId": {
            "type": "string",
            "description": "the authorization tag where the credentials belongs to",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "SaveLockerUserAuthorizationDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "lockerId": {
            "type": "string",
            "format": "uuid"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SaveLockerUserDTO": {
        "required": [
          "firstName"
        ],
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "firstName": {
            "minLength": 1,
            "type": "string"
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "nullable": true
          },
          "authorizationGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SaveUsernameViewModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "authorizationTagRecordId": {
            "type": "string",
            "description": "",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SaveWebhookDTO": {
        "required": [
          "events",
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "url": {
            "minLength": 1,
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "lockerLocation": {
            "$ref": "#/components/schemas/WebhookLockerLocation"
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SendNewActivationCodeViewModel": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "username to send a new activation code to",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "SetPasswordViewModel": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "The old password",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The new password",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "TaskLockerFilterDTO": {
        "type": "object",
        "properties": {
          "cardUID": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "lockerNumber": {
            "type": "string",
            "nullable": true
          },
          "lockerGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "lockerAreaId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestWebhookDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "eventName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeplanDaysOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "UIDFormat": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "UniqueMigrationField": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "UpdateLockerUserDTO": {
        "required": [
          "firstName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "minLength": 1,
            "type": "string",
            "description": "Gets or sets the name of the person associated to\r\nthis AuthorizationTag."
          },
          "lastName": {
            "type": "string",
            "description": "Gets or sets the surname of the person associated to\r\nthis AuthorizationTag.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the email address",
            "format": "email",
            "nullable": true
          },
          "memberNumber": {
            "type": "string",
            "description": "Gets or sets the member number of the person associated to\r\nthis AuthorizationTag.",
            "nullable": true
          },
          "authorizationGroupId": {
            "type": "string",
            "description": "Gets or sets the LockerUserGroupId to which the locker user belongs.",
            "format": "uuid",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "description": "Gets or sets the remark",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets or sets the department",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This class is the DTO representation of the update locker user entity."
      },
      "UpdateUserViewModel": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Gets or sets the DisplayName.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets or sets the Email.",
            "nullable": true
          },
          "defaultLanguage": {
            "type": "string",
            "description": "Gets or sets the DefaultLanguage.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateWebhookDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "lockerLocation": {
            "$ref": "#/components/schemas/WebhookLockerLocation"
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UsernameDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VisibleOrganizationTreeDTO": {
        "type": "object",
        "properties": {
          "isModified": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "recordId": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "roleLockerGroupPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleLockerGroupPermissionDTO"
            },
            "nullable": true
          },
          "roleLockerAreaPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleLockerAreaPermissionDTO"
            },
            "nullable": true
          },
          "roleMasterCardSetPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMasterCardSetPermissionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookLockerLocation": {
        "type": "object",
        "properties": {
          "isAll": {
            "type": "boolean"
          },
          "areaIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Please enter JWT with Bearer into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}